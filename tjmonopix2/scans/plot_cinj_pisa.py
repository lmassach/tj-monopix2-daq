#!/usr/bin/env python3
"""Computes Cinj from the NPZ files produced by plot_peak_Fe55 and plot_tot_vs_qinj."""
import argparse
import glob
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.cm
import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm
from uncertainties import ufloat
from plot_utils_pisa import *

VIRIDIS_WHITE_UNDER = matplotlib.cm.get_cmap('viridis').copy()
VIRIDIS_WHITE_UNDER.set_under('w')


@np.errstate(all='ignore')
def tot_from_dac(x, a, b, c, t):
    return np.where(x < t, 0, np.maximum(0, a*x + b - c/(x-t)))


def load_without_overwriting(input_data, output_array, name):
    overwritten = (~np.isnan(output_array)) & (~np.isnan(input_data[str(name)]))
    n_overwritten = np.count_nonzero(overwritten)
    if n_overwritten:
        print("WARNING Multiple values of threshold for the same pixel(s)")
        print(f"    count={n_overwritten}, file={fp}")
    output_array[:] = np.where(np.isnan(output_array), input_data[str(name)], output_array)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("output_file", help="The output PDF.")
    parser.add_argument("input_file", nargs="+",
                        help="The _scurve.npz and _Fe55.npz file(s).")
    args = parser.parse_args()

    files = []
    for pattern in args.input_file:
        files.extend(glob.glob(pattern, recursive=True))
    files.sort()

    # Load results from NPZ files
    thresholds = np.full((512, 512), np.nan)
    noise = np.full((512, 512), np.nan)
    a = np.full((512, 512), np.nan)
    b = np.full((512, 512), np.nan)
    c = np.full((512, 512), np.nan)
    t = np.full((512, 512), np.nan)
    for fp in tqdm(files, unit="file"):
        with np.load(fp) as data:
            try:
                load_without_overwriting(data, thresholds, 'thresholds')
                load_without_overwriting(data, noise, 'noise')
            except Exception:
                try:
                    load_without_overwriting(data, a, 'a')
                    load_without_overwriting(data, b, 'b')
                    load_without_overwriting(data, c, 'c')
                    load_without_overwriting(data, t, 't')
                except Exception:
                    print("WARNING: neither a _scurve.npz nor a _Fe55.npz:", fp)

    # Do the plotting
    with PdfPages(args.output_file) as pdf:
        plt.figure(figsize=(6.4, 4.8))

        plt.annotate(
            split_long_text(
                "This file was generated by joining the following\n\n"
                + "\n".join(files)
                ), (0.5, 0.5), ha='center', va='center')
        plt.gca().set_axis_off()
        pdf.savefig(); plt.clf()

        # TODO Write dac_from_tot (the inverse of tot_from_dac)
        # TODO Compute Cinj = 1616 / dac_from_tot(Fe55_peak)
        # TODO Compute Cinj / 10.1 (deviation from known value, or charge loss for HV)
